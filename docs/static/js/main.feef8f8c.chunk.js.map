{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAe9C,OAEI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OACzCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAkBfG,YAAY,uB,uBC1BfC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,yBAAKc,UAAU,qCACX,yBAAKC,IAAKf,EAAKgB,IAAI,UACnB,2BAAIN,KCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WACPxB,EAASC,GACAwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAS,SAG1B,CAACpB,IAIGqB,EDjB0BK,CAAc1B,GAAlCa,EAFwB,EAE9BN,KAAca,EAFgB,EAEhBA,QACrB,OACI,oCACI,wBAAIJ,UAAU,qCAAqChB,GACnDoB,GAAW,uBAAGJ,UAAU,oCAAb,cACX,yBAAKA,UAAU,aAGPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACJD,UEbpBkB,EAAe,WAAO,IAAD,EAGM3C,mBAAS,CAAC,cAHhB,mBAGvB4C,EAHuB,KAGX7C,EAHW,KAQ9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQ6C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAUA,UChBtC8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.feef8f8c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories((cat) =>  [ inputValue, ...cat]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        \n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n                placeholder=\"Digite un nombre\"\n            />\n        </form>\n        \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=uiNrB8m6PSpTC2KiFrAl3dOYZl88Glji`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n\n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\n    return (\n        <div className=\"animate__animated animate__fadeIn\">\n            <img src={url} alt=\"title\" />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const {data: images, loading } = useFetchGifs( category );\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n           {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n            <div className=\"card-grid\">\n                \n                {\n                    images.map(img => (\n                        <GifGridItem  \n                            key={img.id}\n                            { ...img }\n                        />\n                    ))\n                }\n                \n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect( () => {\n        getGifs( category )\n                .then(imgs => {\n                    setstate({\n                        data:imgs,\n                        loading: false\n                    })   \n                });\n    }, [category]);\n\n\n\n    return state; \n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    \n    const [categories, setCategories] = useState(['Spiderman']);\n    // const handleAdd = () => {\n    //     setCategories((cat) =>  [...cat, 'Capitan America']);\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key={category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'animate.css';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n\n// \n"],"sourceRoot":""}